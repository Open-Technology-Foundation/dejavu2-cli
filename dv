#!/bin/bash
# dv - Enhanced interactive shell for dejavu2-cli
set -euo pipefail

# Colors and formatting
BOLD="\033[1m"
RESET="\033[0m"
GREEN="\033[32m"
BLUE="\033[34m"
YELLOW="\033[33m"
CYAN="\033[36m"
MAGENTA="\033[35m"
RED="\033[31m"
PROMPT_COLOR="${CYAN}"
HEADER_COLOR="${MAGENTA}"
CMD_COLOR="${GREEN}"
WARN_COLOR="${YELLOW}"
ERROR_COLOR="${RED}"

# Display usage information
usage() {
  printf "${BOLD}${HEADER_COLOR}Usage:${RESET} $(basename "$0") [options]\n"
  printf "\n${BOLD}${HEADER_COLOR}Options:${RESET}\n"
  printf "  ${BOLD}-T, --template${RESET} TEMPLATE    Set template (default: Leet)\n"
  printf "  ${BOLD}-c, --continue${RESET}             Continue existing conversation (default)\n"
  printf "  ${BOLD}-n, --new-conversation${RESET}     Start a new conversation\n"
  printf "  ${BOLD}-m, --model${RESET} MODEL          Specify model\n"
  printf "  ${BOLD}-t, --temperature${RESET} VALUE    Set temperature (0.0-1.0)\n"
  printf "  ${BOLD}-k, --knowledgebase${RESET} KB     Specify knowledgebase\n"
  printf "  ${BOLD}-i, --title${RESET} TITLE          Set conversation title\n"
  printf "  ${BOLD}-h, --help${RESET}                 Show this help message\n"
}

# Helper functions
trim() { echo -n "${1#"${1%%[![:space:]]*}"}"; }

# Display message with color
show_message() {
  local color="$1"
  local message="$2"
  printf "${color}%s${RESET}\n" "$message"
}

# Command help display
show_commands() {
  printf "\n${BOLD}${HEADER_COLOR}Available Commands:${RESET}\n"
  printf "  ${CMD_COLOR}/help${RESET}      - Show this help message\n"
  printf "  ${CMD_COLOR}/list${RESET}      - List current conversation\n"
  printf "  ${CMD_COLOR}/new${RESET}       - Start a new conversation\n"
  printf "  ${CMD_COLOR}/clear${RESET}     - Clear current conversation\n"
  printf "  ${CMD_COLOR}/history${RESET}   - Show command history\n"
  printf "  ${CMD_COLOR}/templates${RESET} - List available templates\n"
  printf "  ${CMD_COLOR}/models${RESET}    - List available models\n"
  printf "  ${CMD_COLOR}/multi${RESET}     - Enter multiline input mode (^D when done)\n"
  printf "  ${CMD_COLOR}/exit${RESET}      - Exit the program\n"
  printf "  ${CMD_COLOR}!command${RESET}   - Execute shell command\n"
}

# Initialize history
HISTFILEDIR="$HOME/.config/dejavu2-cli/dvhistory"
mkdir -p "$HISTFILEDIR"
HISTFILE="$HISTFILEDIR/history"
touch "$HISTFILE"
history -r

# Initialize variables
cmd=''
conv='--continue'
template='Leet'
DV2_ARGS=()

# Process command line arguments
while (($#)); do
  case "$1" in
    -T|--template)
      if [[ -n "$2" && "${2:0:1}" != '-' ]]; then
        template="$2"
        shift 2
      else
        show_message "$ERROR_COLOR" "Error: Template name required after $1"
        exit 1
      fi
      ;;
    -c|--continue)
      conv='--continue'
      shift
      ;;
    -n|--new-conversation)
      conv='--new-conversation'
      shift
      ;;
    -m|--model)
      if [[ -n "$2" && "${2:0:1}" != '-' ]]; then
        DV2_ARGS+=('--model' "$2")
        shift 2
      else
        show_message "$ERROR_COLOR" "Error: Model name required after $1"
        exit 1
      fi
      ;;
    -t|--temperature)
      if [[ -n "$2" && "${2:0:1}" != '-' ]]; then
        DV2_ARGS+=('--temperature' "$2")
        shift 2
      else
        show_message "$ERROR_COLOR" "Error: Temperature value required after $1"
        exit 1
      fi
      ;;
    -k|--knowledgebase)
      if [[ -n "$2" && "${2:0:1}" != '-' ]]; then
        DV2_ARGS+=('--knowledgebase' "$2")
        shift 2
      else
        show_message "$ERROR_COLOR" "Error: Knowledgebase name required after $1"
        exit 1
      fi
      ;;
    -i|--title)
      if [[ -n "$2" && "${2:0:1}" != '-' ]]; then
        DV2_ARGS+=('--title' "$2")
        shift 2
      else
        show_message "$ERROR_COLOR" "Error: Title required after $1"
        exit 1
      fi
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      show_message "$ERROR_COLOR" "Unknown option: $1"
      printf "Use ${BOLD}--help${RESET} for usage information\n"
      exit 1
      ;;
  esac
done

# Check for md2ansi installation
if ! command -v md2ansi >/dev/null; then
  show_message "$WARN_COLOR" "Installing md2ansi from github"
  curl -sL https://raw.githubusercontent.com/Open-Technology-Foundation/md2ansi/main/md2ansi-install.sh | bash
fi

# Display welcome message
printf "${BOLD}${HEADER_COLOR}DejaVu2 Interactive Shell${RESET}\n"
printf "${YELLOW}Type ${BOLD}/help${RESET}${YELLOW} for available commands${RESET}\n"

# Main interaction loop
while ((1)); do
  if [[ -n "${MULTILINE:-}" ]]; then
    # Multiline input mode
    show_message "$BLUE" "Enter multiline input (^D when done):"
    tmpfile=$(mktemp)
    cat > "$tmpfile"
    cmd=$(<"$tmpfile")
    rm "$tmpfile"
    unset MULTILINE
    echo
  else
    # Single line input mode
    printf "${PROMPT_COLOR}dv>${RESET} "
    read -r -e cmd
    cmd=$(trim "$cmd")
    [[ -z "$cmd" ]] && continue
    [[ "$cmd" == '/multi' ]] && { MULTILINE=1; continue; }
  fi

  # Process commands
  if [[ ${cmd:0:1} == '/' ]]; then
    case "$cmd" in
      /exit) 
        show_message "$BLUE" "Goodbye!"
        exit ;;
      /list) 
        dv2 -O --export-conversation current | md2ansi | less ;;
      /clear)
        ID="$(dv2 -x | grep -m1 ^ID: | cut -d' ' -f2 || true)"
        dv2 -X "${ID:-no conv}" || true
        conv='--new-conversation'
        show_message "$GREEN" "Conversation cleared" ;;
      /new)
        conv='--new-conversation'
        show_message "$GREEN" "New conversation started" ;;
      /history) 
        show_message "$BLUE" "Command history:"
        history ;;
      /templates) 
        show_message "$BLUE" "Available templates:"
        dv2 -L | less ;;
      /models) 
        show_message "$BLUE" "Available models:"
        dv2 -a | less ;;
      /help|/\?)
        show_commands ;;
      *) show_message "$ERROR_COLOR" "Unknown command: $cmd" ;;
    esac
    continue
  fi

  # Record in history
  history -s "$cmd"
  history -w

  # Execute shell command
  if [[ "${cmd:0:1}" == '!' ]]; then
    show_message "$YELLOW" "Executing: ${cmd:1}"
    set +e
    eval "${cmd:1}"
    set -e
    continue
  fi

  # Send command to dv2
  dv2 $conv --template "$template" "${DV2_ARGS[@]}" "$cmd" | md2ansi | less
  conv='--continue'
done

show_message "$BLUE" "Exiting."

#fin
